//created on: 02.08.2018
package c4s.impactassessment.process.execution

import java.util.Set;
import java.util.List;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.LinkedList;

import c4s.impactassessment.workflowmodel.*;
import c4s.impactassessment.workflowmodel.WorkflowTask.ArtifactInput;
import c4s.impactassessment.workflowmodel.WorkflowTask.ArtifactOutput;
import c4s.impactassessment.workflowmodel.QACheckDocument;
import c4s.impactassessment.workflowmodel.QACheckDocument.QAConstraint;
import c4s.impactassessment.workflowmodel.QACheckDocument.QAConstraint.EvaluationState;
import com.google.inject.Injector;
import java.time.Instant;
import c4s.jiralightconnector.IssueAgent;
import c4s.impactassessment.jiraapplication.JiraUtils;
import c4s.impactassessment.workflowmodel.constraints.ConstraintTrigger;
import c4s.impactassessment.monitoring.RequestTracingInstrumentation;
import c4s.analytics.monitoring.tracemessages.CorrelationTuple;

import core.base.Artifact;
import core.base.Relation;
import core.fieldValues.common.*;
import core.fieldValues.jira.*;
import core.fieldTypes.utility.FieldType;
import java.util.Optional;

//declare any global variables here
global org.apache.logging.log4j.Logger log;
global RequestTracingInstrumentation analytics;

//constraints for state open
rule "InsertQAConstraintsStateOpen"
	when
		$task : WorkflowTask( getTaskType().getId().equals(DronologyWorkflow.TASK_STATE_OPEN) &&
							  getAnyOneOutputByRole("QA_PROCESS_CONSTRAINTS_CHECK") == null) // when first created, thus no assocated QADocument
	then
		log.debug("Adding QA Check to SSS Revising Task");
		QACheckDocument qa = new QACheckDocument("QA-OPEN-"+$task.getWorkflow().getId(), $task.getWorkflow());
		Optional opt = $task.getOutput().stream().filter(i -> i.getArtifact() instanceof ResourceLink).findAny();
		ArtifactOutput aOut = (ArtifactOutput) opt.orElse(null);
		
		//constraints for Tasks and Sub-Taks
		if (aOut != null && (((ResourceLink)aOut.getArtifact()).getAs().equals("Task") || ((ResourceLink)aOut.getArtifact()).getAs().equals("Sub-task"))) {
			RuleEngineBasedConstraint rebc1 = new RuleEngineBasedConstraint("1_open_"+$task.getWorkflow().getId(), qa, "CheckJiraIssueHasFixVersion", $task.getWorkflow(), "Does the Jira ticket have at least one FixVersion?");
			RuleEngineBasedConstraint rebc2 = new RuleEngineBasedConstraint("2_open_"+$task.getWorkflow().getId(), qa, "CheckJiraIssueRelatedToDesignDefinition", $task.getWorkflow(), "Is the Jira ticket related to exactly one Design Definition?");
			rebc2.setLastChanged(Instant.now());
			qa.addConstraint(rebc1);
			qa.addConstraint(rebc2);
			insert(rebc1);
			insert(rebc2);
		//constraints for Design Definitions
		} else if (aOut != null && ((ResourceLink)aOut.getArtifact()).getAs().equals("Design Definition")){
			RuleEngineBasedConstraint rebc3 = new RuleEngineBasedConstraint("3_open_"+$task.getWorkflow().getId(), qa, "CheckDesignDefinitionRelatedToRequirement", $task.getWorkflow(), "Does the ticket realize exactly one Requirement?");
			qa.addConstraint(rebc3);
			insert(rebc3);		
		//constraints for Bugs	
		} else if (aOut != null && ((ResourceLink)aOut.getArtifact()).getAs().equals("Bug")){
			
		//constraints for Hazards	
		} else if (aOut != null && ((ResourceLink)aOut.getArtifact()).getAs().equals("Hazard")){
			RuleEngineBasedConstraint rebc4 = new RuleEngineBasedConstraint("4_open_"+$task.getWorkflow().getId(), qa, "CheckHazardIsMitigated", $task.getWorkflow(), "Is the hazard mitigated by a Design Definition?");
			qa.addConstraint(rebc4);
			insert(rebc4);
		}
		
		ArtifactOutput ao = new ArtifactOutput(qa, "QA-OPEN-CONSTRAINTS-CHECK-"+$task.getWorkflow().getId());
		insert(qa);

		CorrelationTuple corr = $task.getWorkflow().getLastChangeDueTo().orElse(new CorrelationTuple(qa.getId(), "INITIAL_TRIGGER"));
		qa.setLastChangeDueTo(corr);
		ConstraintTrigger ct = new ConstraintTrigger($task.getWorkflow(), corr);
		ct.addConstraint("*");
		insert(ct);
		modify($task){ addOutput(ao) };
end

//constraints for state in-progress
rule "InsertQAConstraintsStateInProgress"
	when
		$task : WorkflowTask( getTaskType().getId().equals(DronologyWorkflow.TASK_STATE_IN_PROGRESS) &&
							  getAnyOneOutputByRole("QA_PROCESS_CONSTRAINTS_CHECK") == null) // when first created, thus no assocated QADocument
	then
		log.debug("Adding QA Check to SSS Revising Task");
		QACheckDocument qa = new QACheckDocument("QA-IN-PROGRESS-"+$task.getWorkflow().getId(), $task.getWorkflow());
		Optional opt = $task.getOutput().stream().filter(i -> i.getArtifact() instanceof ResourceLink).findAny();
		ArtifactOutput aOut = (ArtifactOutput) opt.orElse(null);
		
		//constraints for Tasks and Sub-Taks
		if (aOut != null && (((ResourceLink)aOut.getArtifact()).getAs().equals("Task") || ((ResourceLink)aOut.getArtifact()).getAs().equals("Sub-task"))) {
			RuleEngineBasedConstraint rebc1 = new RuleEngineBasedConstraint("1_in_progress_"+$task.getWorkflow().getId(), qa, "CheckJiraIssueHasFixVersion", $task.getWorkflow(), "Does the Jira ticket have at least one FixVersion?");
			RuleEngineBasedConstraint rebc2 = new RuleEngineBasedConstraint("2_in_progress_"+$task.getWorkflow().getId(), qa, "CheckJiraIssueRelatedToDesignDefinition", $task.getWorkflow(), "Is the Jira ticket related to exactly one Design Definition?");
			RuleEngineBasedConstraint rebc4 = new RuleEngineBasedConstraint("4_in_progress_"+$task.getWorkflow().getId(), qa, "CheckJiraIssueHasAssignee", $task.getWorkflow(), "Has the Jira ticket an assignee?");
			rebc2.setLastChanged(Instant.now());
			qa.addConstraint(rebc1);
			qa.addConstraint(rebc2);
			qa.addConstraint(rebc4);
			insert(rebc1);
			insert(rebc2);
			insert(rebc4);
		//constraints for Design Definitions
		} else if (aOut != null && ((ResourceLink)aOut.getArtifact()).getAs().equals("Design Definition")){
			RuleEngineBasedConstraint rebc3 = new RuleEngineBasedConstraint("3_in_progress_"+$task.getWorkflow().getId(), qa, "CheckDesignDefinitionRelatedToRequirement", $task.getWorkflow(), "Does the ticket realize exactly one Requirement?");
			qa.addConstraint(rebc3);
			insert(rebc3);		
		//constraints for Bugs	
		} else if (aOut != null && ((ResourceLink)aOut.getArtifact()).getAs().equals("Bug")){
			
		}
				
		ArtifactOutput ao = new ArtifactOutput(qa, "QA-IN-PROGRESS-CONSTRAINTS-CHECK-"+$task.getWorkflow().getId());
		insert(qa);
		
		CorrelationTuple corr = $task.getWorkflow().getLastChangeDueTo().orElse(new CorrelationTuple(qa.getId(), "INITIAL_TRIGGER"));
		qa.setLastChangeDueTo(corr);
		ConstraintTrigger ct = new ConstraintTrigger($task.getWorkflow(), corr);
		ct.addConstraint("*");
		insert(ct);
		modify($task){ addOutput(ao) };
end

//constraints for state resolved
rule "InsertQAConstraintsStateResolved"
	when
		$task : WorkflowTask ( getTaskType().getId().equals(DronologyWorkflow.TASK_STATE_RESOLVED) &&
							   getAnyOneOutputByRole("QA_PROCESS_CONSTRAINTS_CHECK") == null) // when first created, thus no assocated QADocument
	then
		log.debug("Adding QA Check to SSS Revising Task");
		QACheckDocument qa = new QACheckDocument("QA-RESOLVED-"+$task.getWorkflow().getId(), $task.getWorkflow());
		Optional opt = $task.getOutput().stream().filter(i -> i.getArtifact() instanceof ResourceLink).findAny();
		ArtifactOutput aOut = (ArtifactOutput) opt.orElse(null);
		
		//constraints for Tasks and Sub-Taks
		if (aOut != null && (((ResourceLink)aOut.getArtifact()).getAs().equals("Task") || ((ResourceLink)aOut.getArtifact()).getAs().equals("Sub-task"))) {
			RuleEngineBasedConstraint rebc1 = new RuleEngineBasedConstraint("1_resolved_"+$task.getWorkflow().getId(), qa, "CheckJiraIssueHasFixVersion", $task.getWorkflow(), "Does the Jira ticket have at least one FixVersion?");
			RuleEngineBasedConstraint rebc2 = new RuleEngineBasedConstraint("2_resolved_"+$task.getWorkflow().getId(), qa, "CheckJiraIssueRelatedToDesignDefinition", $task.getWorkflow(), "Is the Jira ticket related to exactly one Design Definition?");
			RuleEngineBasedConstraint rebc4 = new RuleEngineBasedConstraint("4_resolved_"+$task.getWorkflow().getId(), qa, "CheckJiraIssueRelatedToUnitTest", $task.getWorkflow(), "Is the Jira ticket related to at least one Unit-Test?");
			RuleEngineBasedConstraint rebc5 = new RuleEngineBasedConstraint("5_resolved_"+$task.getWorkflow().getId(), qa, "CheckAllRelatedBugsClosed", $task.getWorkflow(), "Are all related bugs closed?");
			rebc4.setLastChanged(Instant.now());
			qa.addConstraint(rebc1);
			qa.addConstraint(rebc2);
			qa.addConstraint(rebc4);
			qa.addConstraint(rebc5);
			insert(rebc1);
			insert(rebc2);
			insert(rebc4);
			insert(rebc5);
		//constraints for Design Definitions
		} else if (aOut != null && ((ResourceLink)aOut.getArtifact()).getAs().equals("Design Definition")){
			RuleEngineBasedConstraint rebc3 = new RuleEngineBasedConstraint("3_resolved_"+$task.getWorkflow().getId(), qa, "CheckDesignDefinitionRelatedToRequirement", $task.getWorkflow(), "Does the ticket realize exactly one Requirement?");
			qa.addConstraint(rebc3);
			insert(rebc3);	
		//constraints for Bugs	
		} else if (aOut != null && ((ResourceLink)aOut.getArtifact()).getAs().equals("Bug")){
			RuleEngineBasedConstraint rebc5 = new RuleEngineBasedConstraint("5_resolved_"+$task.getWorkflow().getId(), qa, "CheckJiraIssueHasFixVersion", $task.getWorkflow(), "Does the Bug have at least one FixVersion?");
			qa.addConstraint(rebc5);
			insert(rebc5);
		}
		
		ArtifactOutput ao = new ArtifactOutput(qa, "QA-RESOLVED-CONSTRAINTS-CHECK-"+$task.getWorkflow().getId());
		insert(qa);

		CorrelationTuple corr = $task.getWorkflow().getLastChangeDueTo().orElse(new CorrelationTuple(qa.getId(), "INITIAL_TRIGGER"));
		qa.setLastChangeDueTo(corr);
		ConstraintTrigger ct = new ConstraintTrigger($task.getWorkflow(), corr);
		ct.addConstraint("*");
		insert(ct);
		modify($task){ addOutput(ao) };
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////QA-constraints///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "CheckJiraIssueBase"
	no-loop
	when 
		$ia : Artifact ( )	
		$ct : ConstraintTrigger ( getWorkflow().getId().equals($ia.getIdInSource()) )
	then
end

rule "CheckJiraIssueHasFixVersion" extends "CheckJiraIssueBase"
	no-loop
	when 		
		$qaConst : RuleEngineBasedConstraint( getWorkflow().getId().equals($ia.getIdInSource()) 
											&& getConstraintType().equals( "CheckJiraIssueHasFixVersion" ) 
											&& isAffectedBy($ct) )			 	
	then
		log.debug("Checking "+drools.getRule().getName() + " with Item: ");	
		boolean hasFixVersion;
		if ($ia.getFields().get("fixVersion") == null) hasFixVersion = false;
		else hasFixVersion = !((StringFieldValue)$ia.getFields().get("fixVersion").getValue()).getValue().orElse("").equals("None");
		modify($qaConst) { 			
				addAs(hasFixVersion, JiraUtils.getHumanReadableResourceLinkEndpoint($ia)) , 
				setEvaluated($ct.getRequestCorrelation())
		};
end

rule "CheckJiraIssueRelatedToDesignDefinition" extends "CheckJiraIssueBase"
	no-loop
	when 		
		$qaConst : RuleEngineBasedConstraint( getWorkflow().getId().equals($ia.getIdInSource()) 
											&& getConstraintType().equals( "CheckJiraIssueRelatedToDesignDefinition" ) 
											&& isAffectedBy($ct) )
	then
		log.debug("Checking "+drools.getRule().getName() + " with Item: ");	
		boolean isRelatedToOne = true;
		int n = 0;
		for (Relation r : $ia.getRelationsIncoming()){
			Artifact p = r.getSource();
			if ((p != null) && (p.getFields() != null) && (((IssueType)p.getFields().get("issuetype").getValue()).getName().orElse("").equals("Design Definition"))){
				n++;
				modify($qaConst) { 			
					addAs(isRelatedToOne, JiraUtils.getHumanReadableResourceLinkEndpoint(p))
				};
				isRelatedToOne = false;
			}
		}
		if (n == 0) {
			modify($qaConst) { 			
				addAs(false, JiraUtils.getHumanReadableResourceLinkEndpoint($ia))
			};
		}
		modify($qaConst) { 			
			setEvaluated($ct.getRequestCorrelation()) 
		};
end

rule "CheckDesignDefinitionRelatedToRequirement" extends "CheckJiraIssueBase"
	no-loop
	when 		
		$qaConst : RuleEngineBasedConstraint( getWorkflow().getId().equals($ia.getIdInSource()) 
											&& getConstraintType().equals( "CheckDesignDefinitionRelatedToRequirement" ) 
											&& isAffectedBy($ct) )
	then
		log.debug("Checking "+drools.getRule().getName() + " with Item: ");	
		boolean isRelatedToOne = true;
		int n = 0;
		for (Relation r : $ia.getRelationsOutgoing()){
			System.out.println(r);
			Artifact p = r.getDestination();
			System.out.println(p);
			System.out.println(p.getFields());
			if ((p != null) && (p.getFields() != null) && (((IssueType)p.getFields().get("issuetype").getValue()).getName().orElse("").equals("Requirement"))){
				System.out.println("##############################  2");
				n++;
				if (r.getSourceRole().equals("realizes")){
					modify($qaConst) { 			
						addAs(isRelatedToOne, JiraUtils.getHumanReadableResourceLinkEndpoint(p))
					};
					isRelatedToOne = false;
				} else {
					modify($qaConst) { 			
						addAs(false, JiraUtils.getHumanReadableResourceLinkEndpoint(p))
					};
				}
			}
			System.out.println("##############################  3");
		}
		if (n == 0) {
			modify($qaConst) { 			
				addAs(false, JiraUtils.getHumanReadableResourceLinkEndpoint($ia))
			};
		}
		modify($qaConst) { 			
			setEvaluated($ct.getRequestCorrelation()) 
		};
end

rule "CheckJiraIssueHasAssignee" extends "CheckJiraIssueBase"
	no-loop
	when 		
		$qaConst : RuleEngineBasedConstraint( getWorkflow().getId().equals($ia.getIdInSource()) 
											&& getConstraintType().equals( "CheckJiraIssueHasAssignee" ) 
											&& isAffectedBy($ct) )			 	
	then
		log.debug("Checking "+drools.getRule().getName() + " with Item: ");
		boolean hasAssignee;
		if ($ia.getFields().get("assignee") == null) hasAssignee = false;
		else hasAssignee = !((User)$ia.getFields().get("assignee").getValue()).getDisplayName().orElse("").equals("None");		
		modify($qaConst) { 			
				addAs(hasAssignee, JiraUtils.getHumanReadableResourceLinkEndpoint($ia)) , 
				setEvaluated($ct.getRequestCorrelation())
			};
end

rule "CheckJiraIssueRelatedToUnitTest" extends "CheckJiraIssueBase"
	no-loop
	when 		
		$qaConst : RuleEngineBasedConstraint( getWorkflow().getId().equals($ia.getIdInSource()) 
											&& getConstraintType().equals( "CheckJiraIssueRelatedToUnitTest" ) 
											&& isAffectedBy($ct) )
	then
		log.debug("Checking "+drools.getRule().getName() + " with Item: ");	
		int n = 0;
		for (Relation r : $ia.getRelationsOutgoing()){
			Artifact p = (Artifact) r.getDestination();
			if ((p != null) && (p.getFields() != null) && (((IssueType)p.getFields().get("issuetype").getValue()).getName().orElse("").equals("Unit Test"))){
				modify($qaConst) { 			
					addAs(true, JiraUtils.getHumanReadableResourceLinkEndpoint(p))
				};
				n++;
			}
		}
		if (n == 0) {
			modify($qaConst) { 			
				addAs(false, JiraUtils.getHumanReadableResourceLinkEndpoint($ia)) 
			};
		}
		modify($qaConst) { 			
			setEvaluated($ct.getRequestCorrelation())
		};
end

rule "CheckAllRelatedBugsClosed" extends "CheckJiraIssueBase"
	no-loop
	when 		
		$qaConst : RuleEngineBasedConstraint( getWorkflow().getId().equals($ia.getIdInSource()) 
											&& getConstraintType().equals( "CheckAllRelatedBugsClosed" ) 
											&& isAffectedBy($ct) )
	then
		log.debug("Checking "+drools.getRule().getName() + " with Item: ");	
		boolean relatedBug = false;
		for (Relation r : $ia.getRelationsOutgoing()){
			Artifact p = (Artifact) r.getDestination();
			if ((p != null) && (p.getFields() != null) && ((IssueType)p.getFields().get("issuetype").getValue()).getName().orElse("").equals("Bug") ){
				if ( ((Status)p.getFields().get("status").getValue()).getName().orElse("").equals("closed") ) {
					modify($qaConst) { 			
						addAs(true, JiraUtils.getHumanReadableResourceLinkEndpoint(p))
					};
				} else {
					modify($qaConst) { 			
						addAs(false, JiraUtils.getHumanReadableResourceLinkEndpoint(p))
					};
				}
				relatedBug = true;
			}
		}
		if (!relatedBug) {
			modify($qaConst) { 			
				addAs(true, JiraUtils.getHumanReadableResourceLinkEndpoint($ia)) 
			};
		}
		modify($qaConst) { 			
			setEvaluated($ct.getRequestCorrelation())
		};
end

rule "CheckHazardIsMitigated" extends "CheckJiraIssueBase"
	no-loop
	when 		
		$qaConst : RuleEngineBasedConstraint( getWorkflow().getId().equals($ia.getIdInSource()) 
											&& getConstraintType().equals( "CheckHazardIsMitigated" ) 
											&& isAffectedBy($ct) )
	then
		log.debug("Checking "+drools.getRule().getName() + " with Item: ");	
		boolean isMitigated = false;
		for (Relation r : $ia.getRelationsIncoming()){
			Artifact p = r.getSource();
			log.info("source: "+p.getIdInSource());
			log.info("test: "+p.getFields());
			if ((p != null) && (p.getFields() != null) && (((IssueType)p.getFields().get("issuetype").getValue()).getName().orElse("").equals("Design Definition"))){
				if (r.getSourceRole().equals("mitigates")){
					isMitigated = true;
					modify($qaConst) { 			
						addAs(isMitigated, JiraUtils.getHumanReadableResourceLinkEndpoint(p))
					};
					break;
				}
			}
		}
		if (!isMitigated) {
			modify($qaConst) { 			
				addAs(false, JiraUtils.getHumanReadableResourceLinkEndpoint($ia))
			};
		}
		modify($qaConst) { 			
			setEvaluated($ct.getRequestCorrelation())
		};
end

rule "RemoveConstraintTrigger"
	salience -1000
	when 
		$ct : ConstraintTrigger()
	then
		//log.info(String.format("Finished checking constraints %s for workflow %s", $ct.getConstraintsToTrigger().toString(), $ct.getWorkflowId()));
		analytics.logCheckMessageRequestCompletedInRuleEngine($ct.getRequestCorrelation());
		delete($ct);
end

